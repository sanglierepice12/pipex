#include "../inc/pipex.h"

void	_find_cmd(t_struct *var, char **argv)
{
	int		i;

	i = -1;
	while (++i, var->path[i])
		var->path[i] = ft_strjoin(var->path[i], "/");
	i = 0;
	var->path2 = ft_split(argv[2], 32);
	while (var->path[i])
	{
		var->cmd1 = ft_strjoin(var->path[i], var->path2[0]);
		if (!access(var->cmd1, X_OK))
		{
			free(var->path2[0]);
			free(var->path2[1]);
			break;
		}
		free(var->cmd1);
		i++;
	}
	printf("pas trouvÃ©");
	if (!var->path[i])
		exit(EXIT_FAILURE);
}

void	_child_process(t_struct *var, char **argv, char **env)
{
	if (!access(argv[2], X_OK))
		var->cmd1 = argv[2];
	else
		_init_path(var, env);
	if (!var->cmd1)
		_find_cmd(var, argv);
	close(var->pipe_fd[0]);
	close(var->fd);
	var->exec = ft_calloc(2, sizeof(char *));
	var->exec[0] = argv[2];
	var->exec[1] = NULL;
	execve(var->cmd1, var->exec, env);
	ft_printf("Error");
	exit(EXIT_FAILURE);
}

void	_second_child_process(t_struct *var, char **argv, char **env)
{
	if (!access(argv[3], X_OK))
		var->cmd1 = argv[3];
	else
		_init_path(var, env);
	if (!var->cmd1)
		_find_cmd(var, argv);
	close(var->pipe_fd[0]);
	close(var->fd2);
	var->exec = ft_calloc(2, sizeof(char *));
	var->exec[0] = argv[3];
	var->exec[1] = NULL;
	execve(var->cmd1, var->exec, env);
	ft_printf("Error");
	exit(EXIT_FAILURE);
}



static void	_init_things(t_struct *var, char **argv, char **env)
{
	if (pipe(var->pipe_fd) == -1)
		exit(EXIT_FAILURE);
	var->fd = open(argv[1], O_RDONLY);
	if (var->fd2 == -1)
		exit(EXIT_FAILURE);
	if (var->fd == -1)
		exit(EXIT_FAILURE);
	dup2(var->fd, STDIN_FILENO);
	dup2(var->pipe_fd[1], STDOUT_FILENO);
	// PREMIER FORK
	var->pid[0] = fork();
	if (var->pid[0] == - 1)
		exit(EXIT_FAILURE);
	if (!var->pid[0])
		_child_process(var, argv, env);
	var->fd2 = open(argv[4], O_RDONLY | O_TRUNC | O_CREAT, 0644);
	if (var->fd2 == -1)
		exit(EXIT_FAILURE);
	/*printf("coucou");*/
	dup2(var->pipe_fd[0], STDIN_FILENO);
	dup2(var->fd2, STDOUT_FILENO);
	//DEUXIEME FORK
	var->pid[1] = fork();
	if (var->pid[1] == - 1)
		exit(EXIT_FAILURE);
	if (!var->pid[1])
		_second_child_process(var, argv, env);
	close(var->pipe_fd[1]);
	close(var->pipe_fd[0]);
	waitpid(var->pid[0], NULL, 0);
	waitpid(var->pid[1], NULL, 0);
}

int	main(int arc, char **argv, char **env)
{
	if (arc != 5)
		return (EXIT_FAILURE);
	t_struct	*var;

/*	var = (t_struct){};*/
	var = ft_calloc(1, sizeof(var));
	_init_things(var, argv, env);
	return (0);
}